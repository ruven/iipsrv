19/05/2025:
	- Make sure ICC profile buffer is freed in JPEGImage.cc.


17/05/2025:
	- Added check for unsupported HTTP methods in Main.cc and added convenience function in IIPResponse class
	  to generate appropriate HTTP headers for 405, 304 and 204 status codes


12/05/2025:
	- Minor updates to avoid SonarQube warnings


10/05/2025:
	- Updated IIP metadata object to return real iipsrv version


30/04/2025:
	- Added default initialization of cielab values in Transform::LAB2sRGB() function


28/04/2025:
	- Eliminate compilation warning with clang
	- Fixed TPTImage problem with referencing of potentially uninitialized vector for tiled but non-pyramid TIFFs.
	  Fixes https://github.com/ruven/iipsrv/issues/278


25/04/2025:
	- Added ability to call extra image processing functionality from IIIF through the 'qualities' segment of
	  the API. This adds constrast stretching, histogram equalization, image negative and logarithm options.
	  Disabled by default, but can be actived by setting the IIIF_EXTENSIONS startup parameter to 1 (0 by default).


24/04/2025:
	- Inject rights statement from COPYRIGHT into image metadata if this does not already exist to allow
	  Compressor classes to include this in image output metadata


23/04/2025:
	- Modification to not add 'color' to IIIF extraQualities field in info.json if image is monochrome


22/04/2025:
	- Added convolution to JTL tile pipeline and switched convolution implementation to use edge extension
	  rather than edge wrapping


20/04/2025:
	- Fixed typo in configure.ac.
	- Added TIFF to IIIF extraFormats field plus other cleanups in info.json.


18/04/2025:
	- Make sure sizes are correctly rounded when checking for invalid upscaling


02/04/2025:
	- Fix to use explicit compression types in setQuality() function in TIFFCompressor class.
	- Add extra error checking and correctly assign dataLength to Rawtile after region creation.


29/03/2025:
	- Update to Doxygen code documentation


25/03/2025:
	- Added missing quality level copy to output from TIFF encoding.
	- Switched STL container element addition to std::move to enable faster move semantics


24/02/2025:
	- Minor cleanups to improve constructor initialization and remove unused variables


22/02/2025:
	- Updated CIELAB decoding to fully handle 8 and 16 bit as well as floating point images.
	- Added new sRGB2LAB() function.


20/02/2025:
	- Re-ordered initializer lists in Watermark class constructor.
	- Minor tweak to ICC embedding code to improve logging output.


19/02/2025:
	- Refactor of watermarking code to allow it to be applied to JPEG2000 and JPEG source images when
	  requesting a region through the CVT function. Watermarking now applied as the very final step after
	  all other processing carried out and if image dimensions are greater than 2x the tile size of the
	  source image, the image is divided into blocks and multiple watermarks applied, one per block.
	  Resolves https://github.com/ruven/iipsrv/issues/255. Implementation partially derived from
	  https://github.com/ruven/iipsrv/pull/219


14/02/2025:
	- Harmonizied ICC profile handling between JTL and CVT and replaced EMBED_ICC startup parameter with
	  more flexible MAX_ICC parameter, which defines the maximum acceptable size for an ICC profile.
	  Profiles larger than this are stripped out of the output image. If set to -1, profiles are always
	  added and if set to 0 never.


14/01/2025:
	- Fix to TPTImage string concatenation bug, elimination of type warnings and documentation updates


20/11/2024:
	- Added TIFF output support for both regions (CVT=TIFF) and tiles (TTL=<resolution>,<tile number>). TIFF
	  encoder handles all bit depths, alpha channels, ICC profiles and basic TIFF and XMP metadata.
	- QLT argument can be used to specify both compression as well as quality using the syntax QLT=<compression>:<quality>.
	  For example QLT=WebP:50 will enable WebP compression within TIFF with a quality level of 50. Supported compression
	  schemes are None, LZW, Deflate, Zstd, JPEG and WebP. Default compression is Deflate with level 1 (fastest).


18/11/2024:
	- Correct bounding box calculation when max size has been set.
	- Fixed bug in View.cc's getResolution() when a max size has been set. Fixes https://github.com/ruven/iipsrv/issues/274


28/10/2024:
	- Added EXIF output support for JPEG, WebP and AVIF format writers. Reading of EXIF data is, however, only
	  currently supported by the JPEG input reader, so no TIFF EXIF input support for the moment.


27/10/2024:
	- Added ability to inject ICC profile and XMP metadata into pre-encoded tiles returned from TIFF images. These
	  are essentially raw bitstreams with no container. Works for both JPEG and WebP formats.


17/10/2024:
	- Added basic test script for use via "make check" that tests whether iipsrv can be executed and whether it
	  can create a log file.


16/10/2024:
	- Changes to how the requested width and height are handled by View class as well as how the resolution level
	  is calculated. Fixes problems with fitting images into bounding boxes and now correctly selects appropriate
	  resolution level in all cases. Fixes https://github.com/ruven/iipsrv/issues/273


02/10/2024:
	- Re-factoring of tile byte size check to work cleanly for both JPEG and WEBP and to avoid having to sometimes
	  reallocate memory


01/10/2024:
	- Added check for tile byte size when passing through pre-encoded JPEG tiles for TIFF as these can occasionally
	  be larger than the byte size of raw data.


25/09/2024:
	- Added support for directly reading standard JPEG input images. Implementation uses libjpeg's partial decoding
	  and DCT-scaling functions to optimize decoding as much as is possible and supports ICC, XMP and EXIF metadata.
	  Note that JPEG does not support multi-resolution encoding, so decoding will be slower than reading TIFF
	  or JPEG2000, especially for large images.


24/09/2024:
	- Added TIFF codec version reporting in logfile and updated return signature for getCodecVersion() function.
	  Also code cleanups for OpenJPEGImage and KakaduImage classes.


13/09/2024:
	- Updated XYZ to sRGB conversion matrix to use that in the official IEC 61966-2-1 specification


06/09/2024:
	- Added extra URL decoding to ID field for IIIF's info.json. Fixes https://github.com/ruven/iipsrv/issues/270


05/09/2024:
	- Added convenience function to Rawtile class to duplicate bands for encoders that cannot natively handle
	  single band monochrome images: simplifies WebP encoding.
	- Added AVIF output support. Both tile and region output are supported for both IIP and IIIF. Individual tiles
	  can be requested using the ATL paramter which works in the same way as PTL for PNG and JTL for JPEG. CVT
	  region requests can be made with CVT=avif. AVIF encoder supports alpha channels and 8 bit images only at the
	  moment (avif supports up to 12 bit). To compile, iipsrv requires the libavif development headers and libraries,
	  which are automatically detected in ./configure. libavif itself will require at least one encoder codec enabled.
	  The AVIF_QUALITY startup variable sets the default encoding quality (0=most compression, 100=best quality,
	  default=50), -1 specifies lossless encoding. The AVIF_CODEC variable allows selection of the libavif codec
	  (0=auto, 1=aom, 2=rav1e, 3=svt, default=auto). The selected codec needs to have been built and working within libavif.


29/06/2024:
	- Updated autoconf tiff m4 to search for tiffio.h rather than just tiff.h when using TIFFOpen().
	- Switched metadata assignment within input image classes to use more efficient map insert() syntax.
	- Re-factoring of metadata handling in output compressor classes and addition of more complete metadata
	  embedding for PNG.


29/05/2024:
	- Modification to IIIF region "square" parameter to correctly center the cropped image region.
	- Fix to aspect ratio calculation within CVT.cc to always perform calculation on full resolution scale
	  to avoid rounding issues when calculating at lower resolution levels.


05/02/2024:
	- Added JPEG2000 codec version information to logging.
	- Change to exception handling with Kakadu to avoid crash with mal-formed JPEG2000 streams. Fixes
	  https://github.com/ruven/iipsrv/issues/264.


26/01/2024:
	- Disable pass-through for TIFF-JPEGs where YCbCr sub-sampling has been defined with an RGB color space -
	  these require the full JFIF format rather than the abreviated JPEG within the TIFF


25/01/2024:
	- Fix to calculation of DPI in pixels/m when returned in IIP OBJ request


16/01/2024:
	- Added ability to specify lossless WebP compression by specifying a quality factor of -1


15/01/2024:
	- Fix to IIIF size calculation for region requests that go beyond the boundaries of the image


11/01/2024:
	- Added COPYRIGHT startup variable, which allows a global copyright or rights statement to be added.
	  The IIIF image info.json file now adds a rights (IIIF v3) or license (v1/2) field with rights information
	  from the image itself if available or if not from any global setting.
	- Added IIIF_EXTRA_INFO startup variable, which allows an arbitrary field to be added to all IIIF info.json
	  files. Can be used, for example, to add a preferredFormats or other JSON field.


10/01/2024:
	- Set quality when using pass-through mode to allow cache to sort correctly


21/12/2023:
	- Added CODEC_PASSTHROUGH mode, which allows TIFF image tiles that are already in the requested output
	  format to be used without going through a decode->encode process. This provides a significant speed
	  improvement for tile requests. Feature is active by default and disabled if any image processing is
	  required on image, if the user has made a request to change the quality level or if a composite region
	  is requested. Note that no ICC profile or other metadata is added to the image


13/11/2023:
	- Rationalized, renamed and changed standard enums to C++11 enum classes to allow types to be scoped


08/11/2023:
	- Added MAX_METADATA_CACHE_SIZE startup parameter to allow control over the size of the cache containing
	  image header metadata.
	- Environment getenv() calls now no longer made directly from FIF class, but only once and set using
	  static member variables.


01/11/2023:
	- Further update of configure.ac and complete re-write of libtiff and libjpeg m4 autoconf scripts.
	  This fixes error with clang16 and eliminates all autoconf warnings. make install now also works
	  correctly and renames and copies iipsrv.fcgi to ${sbin}/iipsrv


19/10/2023:
	- Added new IIIF_DELIMITER configuration parameter to enable page or stack slice selection. Now disabled
	  by default unless IIIF_DELIMITER is set. Resolves: https://github.com/ruven/iipsrv/issues/261


03/10/2023:
	- Cleanup of autoconf C++ checks and added conditional building of FCGI
	- Fixes for compilation errors on Mac OS X / clang


26/09/2023:
	- Fix to bug introduced by debug mode change: request_string needs to be cleared at top of FCGI while loop.
	- Added --enable-debug-mode option to configure script.


22/09/2023:
	- Removed the max size limit from IIIF info.json sizes array. This now provides the full list of resolution sizes
	  with the maxWidth and maxHeight variables specifying the maximum available export size.


21/09/2023:
	- Major update of debug mode to allow requests to be made directly on the command line using standard input with
	  output sent directly to a file without the need for a web server or FCGI. Debug mode activated when DEBUG
	  defined in pre-processor during compilation.
	  Also updated debugging information handling for both JPEG2000 codecs, which are now activated through separate
	  KAKADU_DEBUG and OPENJPEG_DEBUG defines.


11/09/2023:
	- Added extra check for untiled TIFF images


07/09/2023:
	- Fix normalization in convolution when kernel sums to zero


03/09/2023: Version 1.2 Released


13/07/2023:
	- Added missing spaces to configure.ac test for Kakadu, which was causing false positive in certain conditions


19/06/2023:
	- Harmonized iipsrv identity string between JPEG and PNG.
	- Added ability to choose a particular page or slice in an image stack when using IIIF by using
	  a comma delimiter after the file name. For example: /image.tif,5/full/500/0/default.jpg (6th page)


05/06/2023:
	- Updated SPECTRA.cc to use stack names


31/05/2023:
	- Updated IIIF to default to version 3 of the Image API


27/05/2023:
	- Refactored codec class constructors to call base class constructor with member initialization list.
	- Fixed number of compiler and Coverity warnings.


22/05/2023:
	- Added ability to handle CORS preflight requests using the HTTP OPTIONS method


17/05/2023:
	- Changed the IIIF scaleFactors variable in info.json to calculate the real scale between levels and not
	  just assume powers of 2.
	- TPTImage now skips non-tiled IFDs: this enables compatibility with formats such as Aperio SVS and others
	  that include non-resolution images such as thumbnails within the IFD sequence.


20/04/2023:
	- CVT now uses same header create function as all other commands, thereby adding missing CORS headers
	  (Fixes: https://github.com/ruven/iipsrv/issues/256). Also removed obsolete chunking code from CVT.cc
	  (chunking no longer supported in HTTP/2).
	- Changed Content-Disposition file name to add size information and allow browser download via "attachment"
	  type when a POST request is received.


06/04/2023:
	- Added ability to serve DPI information through metadata retrieval via OBJ class and through physical dimensions
	  service for IIIF info.json


28/03/2023:
	- Added support for pyramid resolutions stored within SubIFDs for TIFF images. This allows for support for image
	  stacks or sequences consisting of different images stored as a single multi-page TIFF. Each image has it's own
	  set of pyramid resolutions and each image within the stack can be accessed using the existing IIP SDS command.
	  for example SDS=3 for the 4th image in the stack. Enables support for pyramid OME-TIFF whole-slide microscopy
	  image stacks. Also added OBJ=stack command to get the list of stack images and scale in JSON.


23/03/2023:
	- Make sure the PNG filter type is always initialized: code moved from setQuality() to class constructor


22/03/2023:
	- Added partial support for non-interleaved planar configuration TIFFs where each color channel is stored separately.
	  For the moment, only the first channel is returned for such images.


12/03/2023:
	- Re-aligned metadata field names to Dublin Core norms and changed encoding to plain text for non-core IIP metadata
	  requests - allows requests like OBJ=description or OBJ=xmp. Also added new "metadata" argument to OBJ command
	  (OBJ=metadata) to export all available metadata in JSON format


09/03/2023:
	- Added ability to handle TIFF files with differing tile sizes at each resolution level.
	- Moved tile cropping out of TileManager and directly into RawTile class.


03/03/2023:
	- Added Compressor constructer with inline initialization and checks in JPEG and PNG classes for whether DPI is set


02/03/2023:
	- Fixed free space calculation in JPEGCompressor causing corruption when tile sizes are very small and the working
	  buffer is too small


07/01/2023:
	- Added extra Kakadu version check as the metadata handling code does not compile with old versions of Kakadu


12/01/2023:
	- Fixed typo in configure script (https://github.com/ruven/iipsrv/issues/249). Thanks @irv


03/01/2023:
	- Fixed potential integer overflow errors in View.cc and CVT.cc


07/12/2022:
	- Added IIIF profile with appropriate version number to content type responses for info.json


19/11/2022:
	- Fixed typo in TileManager getRegion() function which was preventing bit depth and number of channels being
	  correctly assigned to output region in some cases


16/11/2022:
	- Changes to TPTImage, KakaduImage and OpenJPEGImage to ensure image width and height vectors are empty in
	  loadImageInfo(). This fixes problem when a source image is modified and loadImageInfo() is called specifically.
	  Also modified FIF and TileManager classes to take into account any differences between timestamps and not just
	  when a timestamp is more recent.


04/10/2022:
	- Modification to TPTImage's getTile() and TileManager's getRegion() to handle images with different numbers of
	  channels or bits within the same image sequence or stack.
	- Harmonized codec warning and error logging across libtiff, Kakadu and OpenJPEG with all warnings and errors
	  now fully handled by our internal Logger instance.


03/10/2022:
	- Added ability to apply a convolution kernel to an image through the CNV parameter. Kernel matrices should contain
	  comma separated values (int or floats) and be enclosed in square brackets: CNV=[a,b,c,d,e,f ...]. Kernels should
	  be 3x3 or 5x5 elements in size only. Several pre-defined kernels can be used: gaussian, sharpen, emboss, sobel,
	  laplace, prewitt and scharr, which can be used like so: CNV=sharpen. The CNV functionality is only available for
	  CVT (and equivalent IIIF requests) and not for tile requests due to edge distorsions (wrapping is used here).


29/09/2022:
	- Update to Rawtile class to ensure enough memory allocation takes place when dataLength is greater than the raw
	  space required for the given sample type, width, height and number of channels.
	- Re-factoring of MINMAX handler: channel indices now start from zero and a dash "-" can be used to indicate that
	  the min and max should be applied to all channels.


28/09/2002:
	- Updated KakaduImage and OpenJPEGImage classes to use Rawtile's new allocate() function. Also updated Transform
	  class to correctly update Rawtile capacity value


27/09/2022:
	- Major changes to the Rawtile class to enable move assignment and copy operators for C++11 compatible compilers.
	  This eliminates a number of unnecessary memory allocation and copy operations when using Rawtile objects,
	  improving speed and reducing memory usage


26/09/2022:
	- Modified SDS parameter parsing to allow single values to be passed as well as comma-separated pairs of values.
	- Added setMimeType() function to IIPResponse class to allow response Mime type to be modified on-demand.


22/09/2022:
	- Added check for empty HTTP CONTENT_LENGTH to avoid risk of passing NULL pointer to atoi()


21/09/2022:
	- Further disabled overly stringent ICC profile checks in libpng. Fixes https://github.com/ruven/iipsrv/issues/239


09/09/2022:
	- Fix to incorrect decoding of virtual levels within OpenJPEG: resolves https://github.com/ruven/iipsrv/issues/235


06/09/2022:
	- Added support for reading POST, PUT and other HTTP methods


02/09/2022:
	- Added XMP metadata support for Kakadu


23/07/2022:
	- Fix to IIIF parsing problem when requesting certain region sizes at "full" size


22/06/2022:
	- Large number of small changes including: conversion of functions to const functions, change of string parameters to
	  const reference and other const-related changes that fix the code analysis suggestions provided by SonarCloud


02/06/2022:
	- Corrected throw in FIF.cc to rethrow original exception and not make a copy.
	- Improved detection of pure tile requests in IIIF.cc. Improvements also to View class to eliminate rounding errors
	  when calculating view sizes.


30/05/2022:
	- Added check to output encoders (JPEG, PNG and WebP) to make sure we don't delete memory from RawTiles that is not
	  owned by the RawTile itself


26/05/2022:
	- Standardized all pixel index counters to type uint32_t in Transforms.cc and RawTile.h with added type-casting when
	  necessary. Fixes CodeQL warnings about potential integer overflow.


25/05/2022:
	- Changes to improve logging of timer reporting and addition of std::chrono to Timer.h for supported platforms


23/05/2022:
	- Fix to IIIF.cc to better determine whether a request is for a tile and suitable to be passed to JTL.
	  Fixes problem identified in: https://github.com/ruven/iipsrv/issues/228


22/05/2022:
	- Removed unnecessary <iostream> includes.
	- Tweak to Kakadu configure and updated concurrency check in KakaduImage.cc to use C++11 std::thread if available.


20/05/2022:
	- Added WebP output support. Both tile and region output are supported for both IIP and IIIF. Individual tiles can
	  be requested using the WTL paramter which works in the same way as PTL for PNG and JTL for JPEG. CVT region
	  requests can be made with CVT=webp. WebP encoder supports alpha channels and 8 bit images. To compile, iipsrv
	  requires the libwebp development headers and libraries, which are automatically detected in ./configure.


17/04/2022:
	- Re-write of Transform::twist() function to add OpenMP parallelization and allow supplied CTW matrix to determine
	  number of output channels.
	- Updated TPTImage to better handle the SMINSAMPLEVALUE and SMAXSAMPLEVALUE tags. Multi-band images better supported
	  as well as more robust support for missing tags.


08/04/2022:
	- Added extra FCGI initialization call plus other FCGI-related tweaks. This finally allows iipsrv to be started
	  directly on the command line on Windows


05/04/2022:
	- Removed unnecessary FCGI include from Main.cc (already included in Writer.h)


04/04/2022:
	- Switched mktime() to timegm() in FIF.cc, which fixes occasional errors when using mktime(). timegm() is not only faster,
	  but avoids having to set our timezone with tzset(), and is therefore simpler. This change reverses commit
	  https://github.com/ruven/iipsrv/commit/69b6a572147aaacf055b134af591559156a34d2e which is no longer relevant.
	- Modification to the Windows implementation of strptime to fix crashing (https://github.com/ruven/iipsrv/issues/208)
	  when parsing if-modified-since time stamps.


31/03/2022:
	- Modified TIFFOpen() mode parameter to activate on-demand strip/tile offset/bytecount array loading. This functionality
	  is available in libtiff 4.1.0 onwards and enables significantly faster loading of very large TIFF files


30/03/2022:
	- Modified configure.ac to separate SSE3 and AVX2 Kakadu support detection from version detection. Should fix
	  compilation problem on ARM (https://github.com/ruven/iipsrv/pull/38#issuecomment-1072874587)


21/01/2022:
	- Added fast scale_to_8bit() function to Transform class to allow 16 and 32 bit fixed point data to be efficiently
	  scaled down to 8 bit without use of the floating point image processing pipeline


19/01/2022:
	- Added missing minmax variable to View class to indicate a user-defined min/max. Forces use of the floating point
	  image processing pipeline in CVT.cc and JTL.cc


16/01/2022:
	- Modified TileManager.cc to verify that malloc() has correctly allocated memory.
	- Updated numerical types to std::size_t in RawTile.h, TileManager.cc, KakaduImage.cc, OpenJPEG.cc and Transforms.cc
	  when allocating memory via new to avoid integer overflow - fixes remaining problems identified in
	  https://github.com/ruven/iipsrv/issues/223.


15/01/2022:
	- Added verification that image has been set in SPECTRA.cc and check on the validity of the requested tile
	  resolution in JTL.cc. Fixes a couple of the crash conditions reported in https://github.com/ruven/iipsrv/issues/223


14/01/2022:
	- Detection of HTJ2K also added for KakaduImage.cc for logging purposes (DEBUG needs to be enabled at compile time)


07/01/2022:
	- Added detection of HTJ2K streams to OpenJPEG.cc for logging purposes (DEBUG needs to be enabled at compile time)


14/09/2021:
	- Fix to use C99 stdint types instead of deprecated libtiff types


13/09/2021:
	- Added extra error-checking to TIFFSetDirectory()


03/09/2021:
	- Handle the more stringent ICC profile checking introduced in libpng 1.6. Fix to prevent incorrect sRGB
	  profiles failing with an error.


06/07/2021:
	- Added support for PNG output. Functionality available through the CVT command (CVT=png) as well as through IIIF API.
	  PNG encoder supports alpha channels, 8 or 16 bit output, ICC profiles and XMP metadata.


02/07/2021:
	- Small modification to Compressor class and removal of duplicate quality parameter from JPEGCompressor class


28/04/2021:
	- Additional type casting added to IIIF.cc to avoid compiler warnings


21/04/2021:
	- Modified log transform function in Transform.cc to set appropriate input scaling for 8 bit output


13/04/2021:
	- Switched all FCGI printf statements to putStr or putS as all string data is always pre-formatted before
	  being sent. This is not only more efficient, but also elinates the risk of uncontrolled format string injection.


11/03/2021:
	- Extra checks within bilinear interpolation code to avoid problems when used with address-sanitizer.
	- Re-ordering to fix incoherent rendering of content-disposition in IIPResponse.cc.


04/03/2021:
	- Minor logging changes to TileManager class to allow improve logging with very detailed logging now moved into
	  higher loglevel.


01/03/2012:
	- Modified JPEGCompressor::Finish() class to calculate data size before destroying compression structure.
	  Avoids complaints when using address-sanitizer complilation flag.


13/02/2021:
	- Added logarithm transform processing to Transform.cc using the formula: out = c*log(1+in).
	  Log transform can be requested by setting the gamma request to GAM=log or GAM=logarithm.


03/02/2021:
	- Added round() definition to JPEGCompressor.cc to allow MSVC compilation: https://github.com/ruven/iipsrv/issues/205


27/06/2020:
	- Trailing query suffixes using the ? character are now stripped off the IIIF quality/format string.
	  Fixes: https://github.com/ruven/iipsrv/issues/145


26/06/2020:
	- JPEG encoding re-written. Now more efficient with compressed data put directly into
	  output memory with no intermediate buffering and superfluous memory-memory copying.
	  Change also fixes problem with large ICC profiles: https://github.com/ruven/iipsrv/issues/198


23/06/2020:
	- Fixed incorrect resizing in IIIF when provided with -ve parameters.
	  Fixes: https://github.com/ruven/iipsrv/issues/201.


01/05/2020:
	- Corrected media type for ld+json response in IIIF.cc.
	  Fixes: https://github.com/ruven/iipsrv/issues/199


06/03/2020:
	- Added % escaping to URL::escape() function to avoid problems with FCGI's printf()
	  Fixes https://github.com/ruven/iipsrv/issues/195


25/02/2020:
	- Change return of createHTTPHeader function due to lack on stringstream
	  copying in older versions of GCC.


21/02/2020:
	- New utility function in IIPResponse class to generate HTTP headers,
	  avoiding repetition within Zoomify, Deepzoom, IIIF code etc.


19/02/2020:
	- Added CORS headers to both Zoomify and Deepzoom XML info files


18/02/2020:
	- Added capture resolution info from JPEG2000 images when using Kakadu


17/02/2020:
	- Physical image resolution in DPI or pixels/cm is now extracted from source image
	  (TIFF only for now) and used to calculate appropriate DPI for current zooming level
	  and injected into output JPEG metadata (https://github.com/ruven/iipsrv/issues/191)


07/02/2020:
	- Added ability to change HTTP status code in IIPResponse class and
	  changed empty request reponse to 200 (https://github.com/ruven/iipsrv/issues/190)


27/01/2020:
	- Added content-negotiation to IIIF info.json retrieval. If an IIIF
	  context profile has been added to the HTTP Accept headers, the
	  specified version will be used.
	- Also added ability to disable caching. All info.json responses now
	  not cached by Memcached and Content-Control header is set to private.


23/01/2020:
	- Refactored and corrected resolution calculation code in View class
	- Added IIIF_VERSION server directive and support for v3 info.json


21/01/2020:
	- Changes to standardize error messages in TPTImage class


17/01/2020:
	- Modified MAX_CVT startup variable. Values can now be set all the way
	  down to 1px. Also possible to set to -1 to disable all limits


10/10/2019:
	- Added CORS header to PFL profile output


19/12/2019:
	- Switched indices to unsigned long long in interpolation routines in
	  Transform.cc to better handle very large image requests. Also added
	  memory allocation exception handling in Main.cc


04/12/2019:
	- Added FILESYSTEM_SUFFIX configuration variable.


04/07/2019:
	- Updated homepage URLs.
	- Forced Content-type for error messages to client text/plain to avoid
	  potential XSS issues.


24/03/2019: Version 1.1 Released


20/06/2019:
	- Documentation updates for doxygen


13/06/2019:
	- Re-factored to display Logger output type availability at configure stage.
	- SIGHUP signal now empties internal caches rather than terminates iipsrv.


12/06/2019:
	- Fix to avoid unnecessary conversion to binary when image already binary.
	- Update to OpenJPEG code to fix problem when re-using codec structures
	  more than once in the same request (for example when calculating histogram).


11/06/2019:
	- Fixes to eliminate Coverity static scan analysis warnings.
	- New rewritten OpenJPEG module: now faster, cleaner and correctly
	  handles ICC profiles, bilevel and 16 bit images. Now activated by
	  default if OpenJPEG library found and Kakadu not requested.


13/05/2019:
	- Update to configure.ac to change AC_CHECK_FILE for Kakadu sources to
	  AS_IF to properly enable cross builds. Patched thanks to Helmut Grohne.


23/02/2019:
	- Added test for resolutions that may be untiled within a tiled TIFF.


01/04/2019:
	- Added Logger class, which replaces the previous raw ofstream. The class
	  includes functionality to output log to syslog on UNIX-type systems.
	  Pass "syslog" to the LOGFILE startup environment variable to use syslog.
	- Minor code changes for Windows MSVC compilation


19/03/2019:
	- Small increase in temporary buffer size in OBJ.cc colorspace() function
	  to avoid truncation warning in GCC 8.2


13/03/2019:
	- Fixed bug in vertical mirroring transformation
	- Minor change to IIIF square parsing to allow correct logging


25/02/2019:
	- Added check for overly large XMP sizes in JPEGCompressor.cc


20/02/2019:
	- Fixed rounding error in getViewWidth() / getViewHeight() which was causing
	  certain IIIF requests to be handled by CVT rather than JTL. See:
          https://github.com/ruven/iipsrv/issues/148#issuecomment-453125005
	- Adding missing default initialization for kdu_readmode variable.


15/02/2019:
	- Changed exit code after signal handling for clean shutdown when iipsrv used
	  with systemd.


15/01/2019:
	- Added "bitonal" to list of available qualities in the IIIF info.json file and
	  replaced use of pow with a faster bitwise shift.


09/01/2019:
	- Added ability to do contrast stretching and histogram equalization via extensions
	  to the CNT command (CNT=EQ and CNT=ST respectively). Also added new IIP command to
	  enable color space conversion to greyscale or binary (aka bi-level or bitonal) via
	  the COL command (COL=grey or COL=binary). Image histogram is calculated once when
	  needed and saved in the image cache.


21/12/2018:
	- Added fix for rounding error in CVT.cc to avoid garbled last lines in region
	  requests for very large images.


30/11/2018:
	- Added maxWidth and maxHeight IIIF API 2.1 directives to info.json.


13/11/2018:
	- Converted RawTile dataLength variable to unsigned to improve overflow
	  avoidance as per https://github.com/ruven/iipsrv/pull/156
	- Added Visual Studio version check to round() implementation in
	  windows/Time.cc as now supported in recent versions.


12/11/2018:
	- Refactored image procesing code. Transform functions are now encapsulated
	  within a struct to allow new processing engines to be more easily added.
	- Cleanup to Environment.h to remove redundant comparison as readmode is
	  declared unsigned and can never be less than 0.


05/11/2018:
	- Added codecOptions list to Session class for setting options for the encoders
	  or decoders. Added KDU_READMODE environment variable for setting the Kakadu
	  read-mode in KakaduImage.cc. Options are 0 (fast), 1 (fussy) or 2 (resilient).


23/07/2018:
	- Fixed incorrect big endian TIFF file signature.


27/04/2018:
	- Updates to Windows build files: removed Kakadu dependencies.
	- Added version check for snprintf Windows redefinition as this is now
	  supported in recent versions of Visual Studio.


18/12/2017:
	- Added missing snprintf definition for Windows in JPEGCompressor.h


14/12/2017:
	- Added the "max" parameter for the size section to the IIIF parser ahead of
	  deprecation in IIIF version 3.0: http://iiif.io/api/image/2.1/#size
	- Fixed some spelling mistakes in various files - thanks to Stefan Weil


13/12/2017:
	- Update to configure.ac to fix compilation with Kakadu 7.10


28/11/2017:
	- Modified bilinear interpolation code to avoid risk of unallocated buffer
	  reads at edges and to use replicated pixels.


26/11/2017:
	- Removed exception specifications from the IIPImage and Compressor class
	  declarations as well as from their derived classes. Dynamic exception
	  specifications are deprecated in C++11 onwards. See for rationale and details:
	  http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3051.html


25/11/2017:
	- Added missing RED, GREEN and BLUE colormap implementations to Transforms.cc


24/11/2017:
	- Added input validation for SPECTRA, PFL and MINMAX commands to avoid
	  possible access to unmapped memory - thanks to John Heasman at DocuSign.


17/11/2017:
	- Added a check to KakaduImage.cc for zero-sized regions


04/10/2017:
	- Set an upper size limit to ICC profiles accepted for embedding


04/08/2017:
	- Increased JPEG buffer size to handle large markers such as XMP metadata.
	- XMP metadata size now reported in CVT.cc.


14/07/2017:
	- Added Compressor class from which JPEGCompressor is now derived.
	  Abstracting this will enable easier integration of PNG output.
	  Output format now specified in View class.


06/07/2017:
	- Enabled CORS for error responses.


05/07/2017:
	- Added "Access-Control-Allow-Headers" field if CORS has been set to
	  fix CORS Ajax problems with js libraries such as JQuery, Mootools.


02/07/2017:
	- Added OpenMP threading info to startup in Main.cc.


30/06/2017:
	- Added ICC profile embedding support in JPEGCompressor for both JTL
	  and CVT commands using an implementation based on IJG's iccjpeg.
	  TPTImage and KakaduImage now extract the profile into the metadata map.
	  Added also new EMBED_ICC environment variable to allow user to disable
	  embedding. Thanks to Dave Beaudet for initial implementation.
	- Refactored XMP metadata handling within JPEG.


23/06/2017:
	- Added new OBJ metadata request for IIP protocol to return full list
	  of existing image resolutions.


19/06/2017:
	- Modified URI_MAP to parse this prefix first and only if not present,
	  to use the query string. This allows query strings to be appended for
	  caching purposes etc.


14/06/2017:
	- Added URI_MAP environment variable to enable mapping of URL prefixes
	  to specific protocol handlers without requiring web server rewriting.
	- Added missing checkImage() function to JTL and harmonized with CVT.cc.


12/06/2017:
	- Added try block to avoid crashes with malformed images in older
	  versions of Kakadu.


05/04/2017:
	- Fixed crash in KakaduImage.cc when zero sized images are requested


29/03/2017:
	- Fixed scaling factor for bilinear interpolation in Transforms.cc


02/03/2017:
	- Added extra conditions to JTL uncompressed tile request and slightly
	  refactored code to fix bug when greyscale conversion requested


08/02/2017:
	- Extra try/catch in KakaduImage for images with missing codestreams


29/11/2016:
	- Another update to IIIF aspect ratio code


28/11/2016:
	- Update to aspect ratio code for sizes exceeding max CVT limit


18/11/2016:
	- Modified IIIF.cc to respect aspect ratio when only width or height size
	  parameter is given and size exceeds server max CVT limit.


16/10/2016:
	- Added IIIF 2.1 square region support


29/08/2016:
	- Fix to bug in rotation code for 270 degs introduced when parallelization added.
	- Added test for pkg-config to configure.ac script.


10/08/2016:
	- Update to configure.ac script for OpenJPEG


04/08/2016:
	- Fix to info.json code in IIIF.cc to avoid problems with images containing only
	  one resolution level.
	- Fixed bug in filter_contrast() due to incorrectly calculated buffer size.


08/07/2016:
	- Removed "gray" from IIIF list of supported features - already specified in the
	  qualities list.


07/06/2016:
	- Added fix for API change in get_colour_mapping() function in Kakadu version 7.8


02/06/2016:
	- Type change of counter in filter_contrast to long to avoid overflows with large
	  image exports.


22/03/2016: Version 1.0 Released


08/03/2016:
	- Added sizes field to IIIF JSON responses giving list of exportable pyramid sizes
	  smaller than MAX_CVT.


29/02/2016:
	- Added support for 1 bit bilevel TIFF


11/02/2016:
	- Added backlog parameter support for command line use through --backlog parameter.
	- Fixed several more Coverity scan warnings.


29/01/2016:
	- Minor update to IIPImage.cc to reduce risk of race condition in stat -> fopen calls


28/01/2016:
	- Added ifdefs to Transform.cc to enforce either ivdep for icc or openmp for gcc


15/01/2016:
	- Fixed a series of minor issues identified by Coverity scan


12/01/2016:
	- Added check to JPEGCompressor to reject images that are not 8 bits per channel
	- Added new floatProcessing() function to View.h to simplify code in JTL and CVT


06/01/2016:
	- Added extra parameter check for incoherent region sizes for IIIF protocol


21/12/2015:
	- Fixed infinite loop in View::calculateResolution if requested size = 0. Set
	  minimum output size to 1px.


07/09/2015:
	- Fixed isfinite autoconf macro in acinclude.m4 to force float type


06/08/2015:
	- Added timestamp check and metadata reload for images that have been modified
	- Added X-Powered-By header as a number of web servers strip out the Server header


03/08/2015:
	- Added palette support for bilevel images to handle cases where LUTs are inverted


27/07/2015:
	- Modified ROT command to accept horizontal flipping through "!" prefix as with IIIF.
	- Cosmetic improvement to FIF logging.
	- Modified TPTImage to disable use of memory mapping when opening images as this seems
	  to be slower when opening very large TIFFs.


24/07/2015:
	- Added timers to all image processing functions in CVT.cc + code cleanup.


21/07/2015:
	- Fixed error in View.cc when setting regions sizes that extend beyond image boundaries:
	  regions now cropped to boundaries.


20/07/2015:
	- More OpenMP parallelization and cleanups to Transform.cc


17/07/2015:
	- Increased buffer memory for JPEG encoding to handle certain images or tiles that
	  encode at Q=100 to sizes significantly larger than the raw data.
	- Added new CACHE_CONTROL server parameter to allow user control over this. If not
	  set, it defaults to the previous default value of "max-age=86400".
	- More image processing routines now parallelized with OpenMP: bilinear interpolation,
	  for example, now parallelized and considerably faster.


19/03/2015:
	- Fix to KakaduImage.cc to check for increases in stripe heights and make sure
	  sufficient memory is allocated.


13/02/2015:
	- Added checks for NULL FCGX_GetParam results and to empty HTTP_IF_MODIFIED_SINCE.
	  See: https://github.com/ruven/iipsrv/issues/33 - thanks to Brian Helba.


12/02/2015:
	- Fixed @id decoding in IIIF.cc for paths containing slashes


19/01/2015:
	- Added missing <cctype> include in URL.h and replaced pow(2.0,x) with bit shifting in
	  KakaduImage.cc and View.cc. Now compiles cleanly with VisualStudio Express.
	- Added extra OpenMP parallel declarations to Transform.cc and autoconf directive to
	  enable OpenMP by default.


09/01/2015:
	- Better logging for exceptions in Main.cc


27/11/2014:
	- Added new magic identifier for BigTIFF images to IIPImage.cc


25/11/2014:
	- Fix of rounding error problem in View.cc for calculating resolution level.
	- Fix to IIIF.cc to properly handle resolution 0 requests.


24/11/2014:
	- Fix to TileManager.cc to properly calculate tile height for final row.
	- Updates to IIIF code to ensure tiles are properly detected.
	- Changes to View class to calculate regions from full resolution image.


24/10/2014:
	- Updated MINMAX command syntax in Task.cc to channel:min,max


22/10/2014:
	- Updated KakaduImage.cc to use Kakadu namespaces in version 7.5 and greater.


05/09/2014:
	- Updated IIIF info.json output to be compliant with changed IIIF 2.0 specification.


03/09/2014:
	- Fix to IIPImage.cc for file type detection for multispectral sequences.


22/08/2014:
	- Fix to properly read 12 bit JP2 files.
	- KakaduImage's virtual_levels counter moved into IIPImage class.
	- Modification to properly read number of components in multi-band JPEG2000 images.


21/08/2014:
	- Fixes to allow compilation on older versions of gcc.


20/08/2014:
	- Cleanup to IIIF code and some cosmetic improvements to generated JSON.
	- Added string escape function to URL class and moved all environment variable access to
	  Main.cc.


19/08/2014:
	- Added aspect ratio flag in View.h for use in CVT.cc. Also cleaned up Main.cc to remove
	  unnecessary logging and record extra http headers.
	- Added IIIF protocol version 2.0 support via the IIIF argument.


13/08/2014:
	- The rotate filter only ever operates on 8bit data, so remove if else type statements from
	  function - increases average function speed by about around 15%.
	- Added missing URL.h to src/Makefile.am.
	- Refactored JTL into 2 separate functions: run (parses arguments) & send (performs tile
	  request, processing and sending). Allows this to be re-used in other functions, such as
	  Zoomify.cc etc.
	- Refactored CVT similarly to JTL with now a separate send() function.


11/08/2014:
	- Renamed variable bpp in IIPImage and its derived classes to bpc (bits per channel),
	  which is more logical and how we have named things elsewhere.
	- Modification to TileManager, which was requesting more tiles than necessary for regions.
	- Changes to View.cc to make WID and HEI requests with region exports produce images with a
	  *final* size of that requested by WID or HEI. For example RGN=0.1,0.1,0.5,0.5&WID=500 will
	  now produce an image of 500px in width rather than extract the region from an image of size
	  500px wide. CVT also cleaned up.


06/08/2014:
	- Updated exception handling to use std::invalid_argument and a new derived file_error
	  exception within the IIPImage and derived classes. Allows better distinguishing between
	  HTTP status errors.
	- Moved URL decoding code from FIF.cc to separate URL class in URL.h.


05/08/2014:
	- Added flip function to Transforms.
	- Modified JTL, DeepZoom, Zoomify and CVT to avoid float conversion if not required.
	- Converted bilinear and nearest neighbour resize code to unsigned char to avoid
	  unnecessary conversion to float.


30/07/2014:
	- Moved CTW processing function to before gamma function in JTL.cc and CVT.cc.
	- Added missing function comments and minor layout changes in Transform.cc and FIF.cc.


24/07/2014:
	- Simplified the use of hash_map types and removed the customized hash function, which
	  was causing our image metadata cache to work incorrectly. Removed the const prefix from
	  all hash maps keys.


20/07/2014:
	- Min Max values are now read as vectors in multiple channel images - thanks to Chiara Marmo.


19/07/2014:
	- Added support for magic byte signature file format detection instead of relying on
	  the file path suffix. Images can now be named arbitrarily (though suffixes still used
	  for sequences). Format enum types added to IIPImage class.


18/07/2014:
	- Fix for unusual JPEG2000 "sRGB" bilevel images.


20/03/2014:
	- Fixed signed/unsigned comparison compiler warning in Task.cc.


16/03/2014:
	- Added back missing <algorithm> include to Task.cc.


12/03/2014:
	- Added ability to handle multi-band (>3 channel) images and added new CTW color twist
	  command that takes a matrix that is applied to each channel in the image.
	- Cleanup of and more comprehensive timing output within JTL.cc.


08/03/2014:
	- Changes to resizing algorithms to enable expansions as well as shrink for all views
	  and regions.
	- Added CORS (Cross Origin Resource Sharing) support via CORS environment variable for
	  (AJAX) metadata requests.


24/02/2014:
	- Added missing function timer to JTL.cc and increased output precision in PFL.cc to 9.


24/01/2014:
	- Changes to IIPImage and KakaduImage constructors to force correct initialization of
	  the tile size.
	- Added missing std::isinfinite function for Windows Visual Studio compilation.


17/01/2013:
	- Fix to rotation code to have array indices run fully down to zero when counting down.
	  Thanks to Michal Becak for spotting this.


06/12/2013:
	- Minor fixes to PFL.cc to add extra error checking and eliminate compiler warnings.


05/12/2013:
	- Another update to use the ISO C++11 version of unordered_map if available. Plus a bunch
	  of compiler warning clean-ups.


04/12/2013:
	- Updated hash map definitions to try to use unordered_map if available and fall back to
	  hash_map or map. Now done more cleanly using autoconf detection.


02/12/2013:
	- Changes to IIPImage, TPTImage and KakaduImage class contstructors to use more efficient
	  member initializer lists, which are also necessary for compilation with clang compiler.


25/11/2013:
	- Bug on red/green/blue colormaps fixed. Adding colormap inversion function (Chiara Marmo).


22/10/2013:
	- Bittype compatibility has been completely reviewed. After normalization all processing
	  is done in float (Chiara Marmo).


07/09/2013:
	- Modified PFL to handle single points as well as profiles. Thus syntax for single
	  points: PFL=<resolution>:<x>,<y> and for profiles PFL=<resolution>:<x1>,<y1>-<x2>,<y2>


03/09/2013:
	- Updated PFL command to also handle multi-spectral data.


02/09/2013:
	- Modified PFL command to use JSON and implemented vertical profiles.


28/08/2013:
	- Added PFL command for obtaining raw X profiles of data. Syntax
	  is <resolution>:<x1>,<y1>-<x2>,<y2>. Only horizontal profiles are supported so far.


23/08/2013:
	- Fix to OpenMP code in Transform.cc for compatibility with Intel compiler - thanks
	  Emmanuel Bertin.
	- Addition of extra timing output in JTL.cc


06/08/2013:
	- Moved setenv/unsetenv function definitions to Main.cc where they are now needed following
	  movement of timezone setting code there.


31/07/2013:
	- Fix to JTL.cc and TPTImage.cc for multispectral sequences consisting of images of
	  different bit depths.


23/07/2013:
	- Fix to KakaduImage.cc to enable correct handling of bilevel images.
	- Fix to quality layer decoding - variables moved directly into IIPImage class
	- Scaling of 8 and 16 bit spectral data to normalized 0.0->1.0 float in SPECTRA.cc


08/07/2013:
	- Fix to configure.in for libmemcached configuration problem on Fedora.


02/07/2013:
        - Optimizations to FIF.cc. Unnecessary file header reading is now avoided as top
          level IIPImage class cache fully utilized. Cleanup of constructor code of IIPImage,
          TPTImage and KakaduImage code. Significant speed up to requests of cached images.
        - Modification to if_modified_since code in FIF.cc, to avoid repeatedly resetting the
          timezone environment variable to UTC when checking timestamps, which is a relatively
          slow process. This is now set once globally in Main.cc and set back on main exit.


12/06/2013:
	- Extra checks for malformed images in KakaduImage.cc.


11/04/2013:
	- Several fixes to Kakadu.cc. To force resolution levels to be floor(x/2) rather than the default
	  ceil(x/2) to match how TIFF resolutions are created. Also modification to force 16 bit
	  JPEG2000 to unsigned output. And also fix to strip alpha channels from images.


14/03/2013:
	- Fix to gamma conversion - thanks Chiara Marmo
	- Update to greyscale conversion code


09/03/2013:
	- Updated copyright message in header to new Free Software Foundation address.


08/03/2013:
	- Added greyscale conversion support via new filter_greyscale transform function.


23/02/2013:
	- Gamma correction fixed, minmax commands added, colormap commands added (Chiara Marmo)


30/01/2013:
	- Fix to prevent crashing on malformed JPEG2000 files.


11/12/2012:
	- Changed FLOAT enum type to FLOATINGPOINT to avoid VC++ compiler error.
	- Implemented 16 and 32bit versions of interpolation functions.


10/12/2012:
	- Cleanup to 32 bit code
	- New command to set dynamically the min and max for 32 bit float
	- Addition of rotation function for 90,180,270 degree rotations
	- Fixes to autoconf


30/10/2012:
	- Autoconf cleanup. Removed unnecessary autoconf files: should now use
	  autogen.sh script first before ./configure


18/10/2012:
	- Fix to imageCache delete in FIF.cc - thanks to Michal Becak.


16/10/2012:
	- Added support for TIFF 32 bit integer and float.
	- Fixed 16 bit JPEG2000 support.
	- Added 1 bit support for TIFF.
	- Added gamma support via GAM command.
	- Thanks to Chiara Marmo for initial implementation.


09/09/2012:
	- TIFF metadata fixes.


25/08/2012:
	- Windows compilation fixes by Michal Becak.


13/08/2012:
	- Detect JPEG YCbCr encoding in TIFF and request conversion to RGB
	  by libtiff. Tile _TIFFmalloc() now only occurs in getTile().


16/07/2012:
	- Added check to KakaduImage.cc to handle bilevel images.
	- Clean up to use only floats and floorf() in Transforms.cc.


14/05/2012:
	- Added bilinear interpolation option for CVT resizing. Added
	  INTERPOLATION parameter to Environment.h, which takes an integer.
	  0 for fastest nearest neighbour and 1 for bilinear (default).
	  Current bilinear implementation 2.5x slower than nearest neighbour.
	- Additional fix to MAX_LAYERS code.


11/05/2012:
	- Modified layer handling to decode all available layers if
	  MAX_LAYERS parameter is set to -1.


08/05/2012:
	- Fix to Mac OSX and FreeBSD compilation of KakaduImage.cc.


07/05/2012:
	- Fixed strip height calculation error in CVT.cc


01/05/2012:
	- Modified memory handling in JPEGCompressor.cc to better handle
	  images where the compressed version may be bigger than the
	  original (for example at very high quality levels).
	- Changes to CVT.cc to work with new JPEGCompressor code and removal
	  of chunked encoding header directive from CVT.cc.
	- Fixed bug in CVT when specifying both WID and HEI.
	- Fixed compiler warning in IIPResponse.cc.
	- Added man page.
	- Added missing definition of get_nprocs() function to Kakadu.cc
	  for Mac OSX and FreeBSD.


20/04/2012:
	- Fixed memory overun error in filter_contrast in Transforms.cc.


18/04/2012:
	- Major rewrite of CVT code to unify TIFF and JPEG2000 region
	  export. Region compositing now in TileManager->getRegion with
	  modified getRegion Kakadu function. Changes also to View class
	  and ColourTransforms code to enable greater modularity for
	  image processing to regions. ColourTransforms renamed to
	  Transforms.
	  Thanks to The National Library of Wales, who will be using
	  iipsrv & iipmooviewer to deliver their Historic Newspapers
	  in 2012.


21/03/2012:
	- Fix to TPTImage.c to force RGB conversion for YCbCr compressed
	  JPEG TIFFs, which is now the default in VIPS. Thanks to John
	  Cupitt for spotting this.


17/03/2012:
	- Changes to View.[h,cc] to make sure getRequestWidth and Height
	  return correctly rounded values.


12/03/2012:
	- Added HTTP Status: 400 Bad Request to error messages.


28/01/2012:
	- Fixes to KakaduImage.cc to properly catch exceptions during file
	  opening and a check for existence during codestream shutdown.
	- Also added a check to updateTimeStamp to throw an exception if file
	  unreadable.


28/08/2011:
	- Performance improvement to JPEG2000 16->8 bit downsampling. Now
	  using integer arithmetic rather than float.


24/08/2011:
	- Updates to configure.in, FIF.cc and DeepZoom.cc to check for and
	  handle missing setenv, unsetenv and log2 functions. Fixes problem
	  on Solaris 10.


02/08/2011:
	- Changed timegm function in FIF.cc to use more cross-platform POSIX
	  mktime function instead. Fixes compilation error on Solaris.


22/07/2011:
	- Added 16bit and CIELAB support for JPEG2000.
	- Other minor cleanups.


24/05/2011:
	- Fix added to DeepZoom.cc as FreeBSD does not have the log2 function.
	  Thanks to Andrew Hankinson for spotting this.


23/05/2011:
	- Another fix to ensure the max layers variable is correctly used in
	  Zoomify and DeepZoom output.


15/04/2011: Version 0.9.9 Released


15/04/2011:
	- Fix to View.h to properly take into account max layers variable.


14/04/2011:
	- Minor logging update to Zoomify.cc.


13/04/2011:
	- Updated VC++ project files.
	- Minor changes to logging in Main.cc.
	- Updated autoconf files.


08/04/2011:
	- Change to TileManager.cc to take into account whether a tile is padded
	  or not when applying a watermark.


06/04/2011:
	- Changes to allow compilation on Windows with Visual C++ Express 2010.
	  New windows subfolder with missing time definitions and VC solution file.
	  Fixes also include definition of snprintf, log2 and S_ISREG, which are
	  all missing in Windows. Many thanks to Rob "Bubba" Hines for his help in
	  porting.


21/03/2011:
	- Added extra NULL assignment to Task pointer after catch block to avoid
	  problems with uninitialized memory being deleted.
	- Added SIGINT handler for Ctrl-C interruptions with strsignal() to
	  display a more meaningful message.


17/03/2011:
	- Clean-up of signed/unsigned variables in IIPImage.h and KakaduImage.h.


15/03/2011:
	- Added sanity check for requested resolutions and tiles in JTL.cc.
	- Fixed problem with edge tiles and watermarking.
	- Clean-up of error message in TPTImage.cc.


14/03/2011:
	- Fixed problem with standalone mode. Can now bind to an FCGI socket by
	  running iipsrv on the command line with the argument --bind.
	  For example: ./iipsrv.fcgi --bind localhost:9000
	- Fixed memory problem reported by valgrind with 16bit images.
	  Now simply use memcpy instead of re-assigning memory blocks. Changes to
	  JTL.cc, DeepZoom.cc and Zoomify.cc.
	- Added extra buffer overhead during JPEG compression.
	- Minor fixes to buffer copy code in Writer.h.
	- Fixed memory leak in Memcached code - need to explicitly free returned
	  objects!


01/12/2010:
	- Modified Main.cc to not check in Memcached if there has been a
	  If-Modified-Since parameter sent and to not store 304 or error replies.
	  Otherwise we risk to send 304 replies to requests from uncached browsers.


25/11/2010:
	- Removed final CRLF from JTL, Zoomify and DeepZoom requests, which causes
	  problems with http pipelining in firefox.


24/11/2010:
	- Added extra checks to both TPTImage and KakaduImage for whether the
	  requested resolution exists.
	- Added ability to KakaduImage to downsize resolutions that were not generated
	  during encoding.
	- Added decompressor.finish() to catch block as finish crashes if called after
	  thread environment shut down.


18/11/2010:
	- Fixed problem when clipping when applying watermarks for both 8 and 16 bit images.


15/11/2010:
	- Added memcached support via libmemcached. List of servers passed via
	  MEMCACHED_SERVERS environment variable. Length of time the cache
	  remains valid set by optional MEMCACHED_TIMEOUT environment variable
	  (default is 3600 seconds). Storage is at output level, rather than tile
	  level, so is complementary to internal tile cache.
	  Thanks to Moravian Library in Brno (Moravska zemska knihovna v Brne,
	  http://www.mzk.cz/) R&D grant MK00009494301 & Old Maps Online
	  (http://www.oldmapsonline.org/) from the Ministry of Culture
	  of the Czech Republic.


06/11/2010:
	- Modification to Cache.h to use string::capacity() function instead of length()
	  to determine space used by string.


31/10/2010:
	- Added simple watermarking support via Watermark class. New environment
	  variables added for the watermark image, the opacity and probability.
	  Changes mainly to the TileManager and Session class. Watermarking happens
	  transparently within the TileManager class for all tiles. Thanks to
	  Moravian Library in Brno (Moravska zemska knihovna v Brne, http://www.mzk.cz/)
	  R&D grant MK00009494301 & Old Maps Online (http://www.oldmapsonline.org/)
	  from the Ministry of Culture of the Czech Republic.


15/09/2010:
	- Modified IIPImage.cc to enable handling of images with spectral band
	  indices with mixtures of 3 or 4 digits. For example, H1_pyr_000_090.tif
	  and H1_pyr_2500_090.tif.


05/03/2010:
	- Another fix to JPEGCompressor.cc to fix a crash with very small
	  tiles with libjpeg-8.


23/02/2010:
	- Modified JPEGCompressor.cc to fix compatibility problem with
	  libjpeg version 8. Simply removed jpeg_write_tables from
	  InitCompression function.


09/02/2010:
	- Fixed memory leak in Zoomify.cc and DeepZoom.cc


11/01/2010:
	- JPEG2000 support added via the Kakadu SDK. Added new class
	  KakaduImage derived from the IIPImage class. JPEG2000 support
	  added thanks to Moravian Library in Brno (Moravska zemska knihovna
	  v Brne, http://www.mzk.cz/) R&D grant MK00009494301 & Old Maps Online
	  (http://www.oldmapsonline.org/) from the Ministry of Culture of
	  the Czech Republic.
	- Fix to string literal warnings in Writer.h


08/01/2010:
	- Major changes to the HTTP headers sent by iipsrv. Added
	  HTTP Server id and Last-Modified timestamps to all server output.
	  Checks are now made for a If-Modified-Since response and a
	  304 Not Modified response returned if the timestamps match.
	  This should significantly improve server performance.


04/01/2010:
	- Fixed bug in FIF.cc - the file system prefix was not being
	  initialized for each new image.
	- Layers environment variable changed to MAX_LAYERS to represent
	  the maximum number of layers user is allowed to decode.


03/12/2009: Version 0.9.8 Released


02/12/2009:
	- Adding missing include to IIPImage.cc for compilation with
	  gcc 4.4.1


01/12/2009:
	- Added DeepZoom protocol support. Work carried out thanks to
	  Moravian Library in Brno (Moravska zemska knihovna v Brne,
	  http://www.mzk.cz/) R&D grant MK00009494301 & Old Maps Online
	  (http://www.oldmapsonline.org/) from the Ministry of Culture of
	  the Czech Republic.


29/11/2009:
	- Added SPECTRA.cc class for returning spectral reflectance values
	  from multispectral images.
	- Fix to IIPImage.cc to properly count the number of horizontal and
	  vertical angles (used for multispectral bands).


26/11/2009:
	- Fix to View class to take resampling into account when limiting
	  the CVT output size to the maximum server setting.


17/11/2009:
	- Update to Zoomify to fix way it calculates number of zoom levels.


05/11/2009:
	- Updated the autoconf, aclocal, automake and libtool scripts to the
	  latest versions.


04/11/2009:
	- Added FILESYSTEM_PREFIX environment variable to allow a fixed prefix to
	  be applied to all image paths. Embedded NULL bytes of the form %00 and
	  any "../" are also now stripped out of any path for security reasons.
          (Thanks to Willem Hengeveld for suggesting this)


01/11/2009:
	- Fixes to View.h and View.cc to set the requested size to the maximum
	  allowable if not WID or HEI is set for the CVT command. The correct
	  resolution to use for CVT is now calculated for views smaller than
	  the smallest available.


30/10/2009:
	- Security fixes to Task.cc to make sure while loop is limited to the
	  expected number of arguments. (Thanks to Willem Hengeveld for pointing
	  this out).


19/08/2009:
	- Minor updates to IIPImage.h and IIPImage.cc. FIF.cc also now tests
	  for upper/lowercase .tif and .tiff suffixes.


14/08/2009:
	- Modification to View.cc and CVT.cc to calculate the appropriate
	  resolution as the smallest resolution with a dimension greater size
	  than the requested dimensions. The WID and HEI directives now
	  effectively give bounding dimensions.

11/08/2009:
	- Added simple nearest neighbour resampling to CVT command to allow it to
	  resize to the exact dimensions and not just the nearest available pyramid
	  resolution.
	- CVT Content-disposition tag now gives the image filename allowing the user
	  to save the image directly with this.


01/07/2009:
	- Added quality layer parameter to images for future use with file formats
	  such as JPEG2000 that support this. This allows the decoding of several
	  quality layers via the LYR command. Modifications to the RawTile API
	  as well as IIPImage::getTile resulting in a series of changes to
	  CVT.cc, JTL.CC, TIL.cc, TPTImage.cc, View.h, Main.cc and Environment.h.
	  New startup configuration "LAYERS" to set the default number of layers.
	  Default is 1 otherwise.


22/06/2009:
	- Changes to Zoomify.cc to take into account the fact that Zoomify expects
	  a fixed number of resolution levels.


15/04/2009:
	- Added a flag for padded tiles into RawTile.h. TIFF's are padded out
	  to the tile size, but other formats may not be. Changes to TPTImage,
	  TileManager and CVT to handle this.
	- Also changed the RawTile flag for memory managed tiles.


18/03/2009:
	- Added modification timestamps to the IIPImage and Rawtile classes.
	  The TileManager now checks whether the tile is fresh and reloads it
	  if necessary.


11/03/2009:
	- Several changes to JTL.cc and Cache.h to eliminate a memory leak. Also
	  replaced malloc/free in Rawtile with new/delete.


04/03/2009:
	- Minor changes to IIPResponse.cc to elimate type warnings.


06/06/2008:
	- Modified the way the image dimensions are stored in the IIPImage class.
	  Rather than simply storing the max size, a vector of available dimensions
	  is saved making it easier to get the size for a given resolution.


05/06/2008:
	- Added Zoomify support via the Zoomify=/path.tif request. Works with both
	  the official flash client and the Zoomify patched OpenLayers javascript
	  client. Work carried out thanks to R&D grant DC08P02OUK006 - Old Maps
	  Online (www.oldmapsonline.org) from Ministry of Culture of the Czech Republic.


09/08/2007:
	- Added a Bits-per-channel OBJ request so that viewers can determine whether
	  to perform contrast adjustment server-side or client-side.


07/08/2007:
	- Added CIELAB conversion and contrast handling to JTL so that it can handle
	  16 bit images.


12/06/2007:
	- Updated URL decoding function in FIF.cc to C++ style and avoid a potential
	  buffer overflow.
	- Changed Task::run arguments to be const std::string& instead of just std::string.


08/06/2007:
	- Changed JTL headers to enable HTTP 1.1 compatible cache control.


13/12/2006: Version 0.9.7 Released


07/11/2006:
	- Fixed the standalone mode, which is now activated by launching with
	  --standalone with an argument giving the socket port or path. For example,
	  localhost:8000 or /tmp/iipsrv.sock.


31/10/2006:
	- Added hillshading Task class and function for simulated raking light
	  visualization using 3D surface normal data. This is used via the SHD
	  command in association with CVT, which takes 2 arguments: the horizontal
	  light source angle in degrees and the vertical angle from the horizontal
	  plane.


26/09/2006:
	- Cleaned up the hash_map and pool_allocator stuff a little to use typedefs
	  instead of #ifdefs.
	- Added the legacy JTLS command class for panoramic views.


22/09/2006:
	- Added an FCGI stand-alone mode usable with lighttpd's spawn-fcgi command.
	- Also changed the IIPImage cache to use a hash_map and pool_alloc memory.


19/09/2006:
	- If we are using appropriate versions of g++, we now use the high
	  performance pool_alloc memory allocators for our cache containers.
	  Also, instead of a std::map, we use the hash_map extension which
	  offers better performance. Otherwise we default to std::map.
	- Fixed problem in TileManager where uncompressed tiles in the cache
	  were not being cropped when converted to JPEG. The IIPImage tile_width
	  and tile_height fields now hold the base tile size and not the current
	  tile size.


18/092006:
	- Added a "Last-Modified" and "ETag" header to the CVT HTTP response
	  to prevent double requests from being made by web browsers.
	- Fixed bug in CVT where the tile size was being incorrectly set from
	  the IIPImage object and not the tile itself, which was a problem
	  when getting tiles from the cache.


15/09/2006:
	- Changed the Cache keys to be simple strings rather than custom
	  objects. This has solved one of the crashing problems when tiles
	  are deleted from the cache.


29/08/2006:
	- Added Writer class to shield the command implentations from any
	  FCGI specific functions.


28/08/2006:
	- *Major* refactoring of the code. Each command is now called via its own
	  Task class (command pattern), with no processing done in Main.cc.
	  OBJ commands are in OBJ.cc and each output command (eg TIL,CVT etc)
	  now have their own classes.
	- The xangle and yangle variables are now in the View class, which
	  was previously named the ImageTransform class.


25/08/2006:
	- Cleaned up the option variable parsing in Main.cc. It is now mostly
	  done via an Environment class, which checks for defaults etc.


16/08/2006:
	- Moved QLT limit checking from Main into JPEG class. Also now check
	  for empty strings.


08/08/2006:
	- Changed the contrast adjustment code to limit the result to a max of
	  255.0 as this was creating problems with the windows build.


07/03/2006: Version 0.9.6 release.


13/02/2006:
	- Fixed another problem on Mac OS X in TPTImage.cc. The number of
	  channels and bits per sample were giving strange values, so a
	  temporary uint16 variable is now used and cast from. It now works
	  perfectly on Mac :-)


09/02/2006:
	- Changed the start_t and start_u types in Timer.h to long for
	  compatibility with Solaris and Mac OS X.
	- Some code cleanups in the IIPResponse class.


23/01/2006:
	- Added an extra timer for tile insertion - this is the slowest
	  cache operation. We should look to put this in a separate
	  thread at some point!


18/01/2006:
	- Added support for ptif suffix images. These are in fact just
	  pyramidal TIFF images.


11/01/2006:
	- More fixes to the TileManager class. Cache can now handle
	  multiple compression types for the same tile simultaneously.


24/12/2005:
	- Major rewrite of the TileManager class. Now much more concise.


21/10/2005:
	- Added a check in JPEGCompressor for the number of channels.
	  JPEG can handle only image with either 1 or 3 channels.


13/10/2005:
	- Added a TileManager class to act as a higher level access to
	  the tile cache. It checks whether a JPEG compressed tile
	  already exists and if not decodes one from the source image.
	  It also crops any edge tiles to the correct size (required
	  for the new Vips TIFF format).


12/10/2005:
	- Fixed a JTL problem with the new tiled TIFF format. The edge
	  tiles are now cropped before being sent out.
	- Reworked JTL to just forward the request to JTLS rather than
	  duplicating the code there.


09/06/2005:
	- Changed IIPImage.cc to use glob conditionally if glob has been
	  detected. This is needed for mingw compilation.


01/04/2005:
	- Completed an LRU tile cache with the ability to set the max
	  cache size via the configuration variable MAX_IMAGE_CACHE_SIZE,
	  specified in MB.


22/03/2005:
	- Added new Timer class to handle timing data to debug tile
	  access, command and total request times.


06/01/2005:
	- Found problem in the CVT code when dealing with image sequences
	  of different numbers of channels. We have to reload the channel
	  information.


15/12/2004:
	- CVT now works with the new standard compliant TIFF tile format
	  as used by vips-7.10 and later.


10/12/2004:
	- CVT now works with 16 bit TIFF. The compression type reported
	  by TIL also switches from JPEG with 8 bit images to none with
	  16 bit.


08/12/2004:
	- Added CNT contrast command support. Also added check to
	  TPTImage openImage() for whether our image is in fact
	  tiled or not, which can cause the server to crash.


07/12/2004:
	- Added 16 bit support. Changes to RawTile - the data is now
	  a generic (void*) and there are now fields for channels per
	  sample and bits per channel. Changes also to TPTImage.cc,
	  Main.cc and JPEGCompressor.cc.


01/09/2004:
	- Changed the LAB2sRGB code to allow a/b values from
	  +-127 as per the TIFF spec instead +-100.
	- Also fixed a problem caused by signed/unsigned comparisons
	  in ImageTransform with requests for CVT sizes smaller than
	  the tile size.


26/08/2004:
	- Added largefile support by simply adding a configure
	  directive that will add the appropriate defines.


05/07/2004:
	- Fixed problem in JPEGCompressor.cc concerning the value of
	  a structure that we try to read after de-allocating memory.
	  Only seems to be a problem with MSVC++ compiler. (Thanks to
	  Chris Tuijn for spotting this).


11/05/2004: Version 0.9.5 release.


04/05/2004:
	- Moved the colorspace check from TPTImage::getTile to
	  TPTImage::openImage so that a Colorspace request will always
	  have an associated colour space and not just after getTile
	  has been called. We assume for now that all the tiles of an
	  image are all of the same colour space.


21/05/2004:
	- Removed no-cache pragma from CVT header. Also modified
	  max_CVT variable to limit the effective size and not the
	  total image size. ie a small RGN of a massive image can
	  still be sent OK. The resolution calculations have been
	  moved into ImageTransform and is now performed at the last
	  moment in the CVT section.


16/05/2004:
	- Added MAX_CVT environment variable to limit width and height
	  requests of CVT commands. The default is set to 5000 pixels.


02/04/2004:
	- Added SDS command support. This can be used for specifying
	  subimages or the horizontal/vertical angle in 3D sequence
	  images and will eventually replace the use of JTLS by the
	  client. Current usage is SDS=h,v where h and v are the
	  horizontal and vertical sequence angles.


01/04/2004:
        - Fixed length given by the error response. We now count both
          the code and the argument.


30/03/2004:
        - Fixed TIL to only send the MIME type once before the tile
          sequence.
        - Added better error handling. The IIPResponse is now set
          whenever we have a problem in Main.cc. Plus the catch
          clause now checks for an error in IIPResponse and sends
          this if available rather than the advertising banner.


29/03/2004:
        - Changed the vertical and horizontal views syntax back to
          old style.
        - Fixed problem with the number of CRLF's after the MIME type:
          Apache complains if there are not 2 sets of CRLF.
        - Changed the IIPImage metadata map to use the string class
          rather than char* - seems to fix a freeze problem.


06/03/2004:
	- More fixes to RGN code. Moved the verification logic into
	  the ImageTransform class itself rather than having it in
	  Main.cc. Also fixed a crash resulting from the use of
	  inlining - a gcc bug perhaps? Anyway, now perfectly stable.


05/03/2004:
	- Some minor fixes to the RGN code to prevent crashes from
	  images of less than 8 pixels in size.


04/03/2004:
	- Finished implementation of RGN CVT modifier. Can now specify
	  a region to CVT rather than always having the whole image.
	- Updated embedded XHTML advertising page.
	- Some doxygen-related cleanups and documenting.


03/03/2004:
	- Changed Horizontal-views and Vertical-views return syntax to
	  return the number of views also (request by Denis):
	  Vertical-views/<number views>:view1 view2 ...
	  eg. Vertical-views/3:0 90 180.


02/03/2004:
	- Added automatic colour spaces conversion for CIELAB images
	  to sRGB in CVT mode.


14/12/2003:
	- Added Content-disposition headers to the JTL,JTLS and CVT output.


10/11/2003:
	- Added missing std:: prefixes to a few STL variables in IIPImage.h
	  and IIPResponse.h.
	- Fixed the TIL command to return only the tiles within the
	  rectangle defined by the specified range rather than all of them.


25/10/2003:
	- Fixed missing value in error message for non decodable tiles
	  in TPTImage.cc and erroneous extra CRLF in the Colorspace
	  reply.


22/10/2003:
	- Changed the IIPImage class to give the horizontal and
	  vertical angles a default value of 0,90 for non-sequence
	  images.


11/10/2003:
	- Removed the new allocator in getFileName() in IIPImage.cc to
	  a statically allocated buffer of size 1024.


04/10/2003:
	- Generalised the metadata handling in Main to cope with any
	  available metadata.
	- Changed the way Basic-info and Summary-info work to simply
	  add more objects to the request string rather than try to
	  handle it themselves. Nicely eliminates duplicate handler code
	  without introducing classes or external functions for each obj.
	- Also fixed the server capability return code to follow the IIP
	  spec properly.


03/10/2003:
	- Added tracking of image data to the IIPResponse class. In this
	  way, we can print an error if we have an uncomplete command
	  syntax. eg. a WID without a CVT. We should now never not have
	  some sort of response from the server.
	- Also added Author, Subject etc metadata handling to IIPImage
	  and the necessary handlers to IIPResponse.


15/09/2003:
	- Added doxygen compatible comments to the header files. The
	  generated documentation is in the doc subdirectory.
	- Changed sprintf to snprintf in Main.cc for the vertical-views
	  handler; snprintf is already used everywhere else.
	- Added IIPResponse class to handle message passing back to the
	  client from OBJ requests. This allows for better error and
	  mime header handling and eliminates having to use FCGX_Fprintf.
	- Added SIGHUP handling to the other signals handled - we simply
	  exit and allow mod_fastcgi to restart us.
	- Added support for IIP-opt-comm and IIP-opt-obj requests.
	- Removed the deprecated Max-sequence and Vertical-views object
	  handlers.


12/09/2003: Version 0.9.4 release.
	- Added content-type heading to error returns.
	- Added default catch() clause to the end of the main try block.


11/09/2003:
	- Added Base64 URL decoding for the image path argument supplied
	  to the FIF command.
	- Cleanups to eliminate most GCC -Wall warnings.


10/09/2003:
	- Changed tolower to ::tolower to fix compilation problem using
	  GCC 3x.
	- Logging cleanup.


08/09/2003:
	- Major cleanup up the JPEGCompressor class.
	- Added bits per pixel to the IIPImage copy constructors.
	- Used the new JPEG buffer-buffer functions to add support for the
	  CVT command (limited to JPEG output only).


07/09/2003:
	- Modified the JPEGCompressor class to allow stream-based buffer
	  to buffer encoding via 3 new functions (init, compressstrip and
	  finish).


03/09/2003:
	- Fixed bug in TPTImage.cc. Added TIFFGetField commands for tile_width
	  and tile_height so that they get reset to the correct value even if
	  we loop through the end of a row.
	- Added a bits per pixel field to the IIPImage class.


02/09/2003:
	- Fixed mis-placed jpeg_set_defaults in JPEGCompressor.cc.
	  Was being called after some individual values were set. This only
	  seemed affected the dct_method. Should compress faster now.


28/08/2003:
	- Added WID and HEI command support.


25/08/2003:
	- Autoconf cleanups. Now properly detect for JPEG and TIFF.


24/08/2003:
	- Improvements to the configure script. Can now completely disable
	  the dynamic module loading code from even compiling.
	- The FCGI development library is now included in the distribution
	  for convenience and is integrated into the top-level configure
	  system. It is only used if it is not found on the computer.


22/08/2003:
	- Added extra variable to track the current vertical position as
	  well as the horizontal. Fixes bug when switching between vertical
	  angles on sequence zero.
	- XHTMLified the advertising banner :-)


22/03/2003: Version 0.9.3 release.
	- Reworked and cleaned up the TIL compression type and subtype data
	  stream prefix with reference to the FlashPix specification.


21/03/2003:
	- All commands are converted to lower case to handle the java JAI
	  IIP implementation which does not properly follow the spec.
	- Also fixed typo in the Colorspace OBJ reply.


15/03/2003:
	- Modifications to the JPEGCompressor constructor to take only the
	  Q factor. Plus the environment variable JPEG_QUALITY can
	  set the default Q factor.
	- Plus added an #undef HAVE_STDLIB_H to JPEGCompressor.h which was
	  interfering with libjpeg. No compiler warnings now even
	  with -pendantic set :-)


13/03/2003:
	- Added extended colour space handling. The TIFF image now has its
	  colourspace extracted and a ColourSpace enum type now exists.
	  Greyscale, RGB and CIELAB are now handled, though the latter is not
	  in the official IIP spec.


10/03/2003:
	- Changed RawTile copy constructor to use memcpy instead of looping
	  through an array: Big speed improvement :-)


08/03/2003:
	- Added USR1 and TERM signal handling to main loop: We now have some
	  stats printed in the logfile on shutdown.
	- Modified IIPImage to accept a filename pattern variable, so that
	  the "_pyr_" image sequence pattern can be user modified.
	- Plus started work on a new tile cache system, but seems very slow,
	  so will mothball it till after the forthcoming release.


10/11/2002:
	- Changes to some header files etc to make it compatible with gcc 3.2:
	  Mainly STL string specifiers, plus replacement of slist type
	  with std::list.


24/03/2002
        - Changed error handling to follow IIP return code specification
          for unsupported objects and commands. Should do this for
	  each individual exception also.
        - Added runtime configuration variable for max image cache size.


18/03/2002: Version 0.9.2 release.
	- Changes to JPEGCompressor.cc: Fixed bug when encoding very small
	  tiles. Sometimes the JPEG data is larger than the original
	  so we need to allocate some extra memory just in case.
	- Also fixed the iip_empty_output_buffer( j_compress_ptr cinfo )
	  function. Now properly empties the buffer and returns TRUE.
	- The Compress() routine now passes the entire image buffer array
	  into jpeg_write_scanlines rather than doing it row by
	  row. The row array is dynamically allocated and deleted
	  at the end.
	- Added proper copy constructor to RawTile class to properly copy
	  data without leaving dangling pointers.


09/08/2001:
	- Added time stamp.
	- Some minor changes to the JPEG wrapper - a couple of ints
	  changed to size_t's and a conditional added just before
	  the memcopy code.


07/07/2001: Version 0.9.1 release.
	- Added field for number of bands in Rawtile.h, so that we can now
	  view 1-band black and white as well as 3-band colour images
	- Added missing JTL command handler for single non-sequential images
	  This does the same as JTLS command, but supplies 0 for sequence
	  and angle.


05/03/2001: Version 0.9 release.
	- Bug fixes: moving IIPImage objects in the cache was resulting
	  in lost information.
	- DSOImage memory bug. Modules should handle their own cleanup
	  in close_image, which is now called by the ~DSOImage


04/03/2001:
	- Changed ModuleLoader to a DSOImage derived class of IIPImage.
	- Use a STL map of image type to module path keywords instead
	  of trying to store caches of DSOImages.
	- Clean up and rationalisation of IIPImage class and derived
	  classes.


01/03/2001:
	- Added tokenizer class.
	- Now checks for variables passed to fcgi at start up time
	  via --initial-env directive within Apache.
	- Added basic ModuleLoader class for loading external image decoders.
	- Fixes so that it no longer crashes even with null input query etc.
	- Removed ifdef DEBUG stuff.


27/02/2001:
	- Added Tile-size directive and related IIPImage::getTileWidth() etc.
	- Allowing for various tile sizes to be used :)
	- Improved logfile reporting.
